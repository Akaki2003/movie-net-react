 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 20:58:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 20:58:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:01:02
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:01:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:03:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:03:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:09:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQJ4RE3QC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:09:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:09:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQJ4RE3QC:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:09:22
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:17:05
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:19:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQON0DBTE:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:19:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:19:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQON0DBTE:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:19:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:19:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:21:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:30:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:30:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:30:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:30:03
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:31:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F8:00000001
Body = 
ResponseTime = 13.05.2023 21:31:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:34:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:34:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:34:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSB:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:34:13
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:34:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSC:00000001
Body = 
ResponseTime = 13.05.2023 21:34:25
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:34:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:36:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR2D7MCOP:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:36:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:36:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR2D7MCOP:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:36:49
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:37:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:51:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:51:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:51:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAD:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:51:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:52:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAE:00000005
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:52:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:52:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:53:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAG:00000001
Body = 
ResponseTime = 13.05.2023 21:53:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:11:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRM1N1K5F:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:11:48
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:11:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRM1N1K5F:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:11:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:13:02
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:15:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:16:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJROM5U0I1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:16:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:16:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJROM5U0I1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:16:35
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:18:04
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:19:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:29:56
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:30:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:34:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:36:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS3T5FIG7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:36:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:36:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS3T5FIG7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:36:36
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:37:09
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:38:36
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:40:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:42:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS73Q0F27:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:42:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:42:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS73Q0F27:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:42:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:42:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:51:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:51:38
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:51:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:51:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:51:48
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:52:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQS:00000001
Body = 
ResponseTime = 13.05.2023 22:55:32
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:55:57
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:56:10
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:56:54
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:02:46
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:03:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQT:00000009
Body = 
ResponseTime = 13.05.2023 23:07:01
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:07:05
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:09:07
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:09:48
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:11:27
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:15:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:17:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQU:00000003
Body = 
ResponseTime = 13.05.2023 23:23:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:26:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQV:00000001
Body = 
ResponseTime = 13.05.2023 23:29:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:29:33
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:31:00
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:37:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:15:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5G:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:15:39
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:15:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:15:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5G:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:15:42
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "hhhhhhh",
      "img": "string"
    },
    {
      "id": 10,
      "name": "jjjjj",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:15:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5H:00000001
Body = 
ResponseTime = 14.05.2023 00:15:57
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:16:24
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:18:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5J:00000001
Body = 
ResponseTime = 14.05.2023 00:22:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:23:42
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5K:00000001
Body = 
ResponseTime = 14.05.2023 00:26:43
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    }

  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:26:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5L:00000001
Body = 
ResponseTime = 14.05.2023 00:26:55
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:27:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5M:00000001
Body = 
ResponseTime = 14.05.2023 00:27:17
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:44:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAK:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:44:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:44:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAL:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:44:47
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "აააააააააააააა",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ბბბბბბ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:48:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAM:00000001
Body = 
ResponseTime = 14.05.2023 00:50:20
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ზზზზზ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ხხხხხ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:50:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAM:00000003
Body = 
ResponseTime = 14.05.2023 00:52:05
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "გტგტტგტ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ტგტგტგ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:52:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000001
Body = 
ResponseTime = 14.05.2023 00:53:26
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "გტგტტგტ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ტგტგტგ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:53:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000003
Body = 
ResponseTime = 14.05.2023 00:53:34
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ზზზზზ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ზზზზზ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:53:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000005
Body = 
ResponseTime = 14.05.2023 00:55:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:56:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUI26FP7B:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:56:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:56:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUI26FP7B:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:56:31
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "სსსს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "სსსს",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:56:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:11:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT5:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:11:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:11:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT5:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:11:13
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 10,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:21:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT6:00000001
Body = 
ResponseTime = 14.05.2023 18:22:59
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 10,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:23:19
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 7,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:31:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:33:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:33:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:33:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:33:34
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:35:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPG:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 18:35:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetMovieById
IsSecured = True
QueryString = ?Id=1
RequestBody = 
Time = 14.05.2023 18:36:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPH:00000001
Body = {"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}
ResponseTime = 14.05.2023 18:36:08
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "შორენა ბეგაშვილი",
  "img": "ფოტო"
}
Time = 14.05.2023 18:36:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPI:00000001
Body = 
ResponseTime = 14.05.2023 18:36:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "bames jond",
  "img": "pict"
}
Time = 14.05.2023 18:37:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPJ:00000001
Body = 
ResponseTime = 14.05.2023 18:37:02
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateActor
IsSecured = True
QueryString = 
RequestBody = {
  "id": 5,
  "name": "asasasa",
  "img": "ddddd"
}
Time = 14.05.2023 18:37:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPK:00000001
Body = 
ResponseTime = 14.05.2023 18:37:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:37:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPL:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 18:37:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:57:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKHE503ODF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:57:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:57:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKHE503ODF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:57:32
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:58:17
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:58:25
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:59:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 7,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    },
    {
      "id": 9,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 19:02:15
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 7,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 7,
      "name": "string",
      "img": "string"
    },
    {
      "id": 6,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 19:04:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:52:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GS:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 20:52:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:52:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GS:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 20:52:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:53:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GT:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 20:53:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllActors
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:54:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GU:00000001
Body = [{"id":3,"name":"apapaapapapa","img":"string","movies":null},{"id":4,"name":"444444","img":"string","movies":null},{"id":5,"name":"asasasa","img":"ddddd","movies":null},{"id":6,"name":"qsvii","img":"string","movies":null},{"id":7,"name":"მიხო","img":"ფსიხო","movies":null},{"id":8,"name":"8888","img":"string","movies":null},{"id":9,"name":"wewewew","img":"string","movies":null},{"id":10,"name":"wqwqwqwq","img":"string","movies":null},{"id":11,"name":"bbbbbbbbbbbbbbbbbbbbbbbbb","img":"string","movies":null},{"id":14,"name":"cxrrrr","img":"string","movies":null},{"id":15,"name":"atttat","img":"string","movies":null},{"id":16,"name":"შორენა ბეგაშვილი","img":"ფოტო","movies":null},{"id":17,"name":"bames jond","img":"pict","movies":null}]
ResponseTime = 14.05.2023 20:54:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 21:37:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8M:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 21:37:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 21:37:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8M:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 21:37:12
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 14.05.2023 21:40:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8N:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQwODYwNDUsImV4cCI6MTY4NDA4OTY0NSwiaWF0IjoxNjg0MDg2MDQ1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.gSII1ikgsKv1PfjJVH0oz7z8p-cVgjP9A8cawya-8fU
ResponseTime = 14.05.2023 21:40:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 18.05.2023 00:13:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 18.05.2023 00:13:24
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 18.05.2023 00:13:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 18.05.2023 00:13:26
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:"2008"}
Time = 18.05.2023 00:18:16
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000001
Body = {"errors":{"metadata.Hr":["Invalid character after parsing property name. Expected ':' but got: 2. Path 'metadata.Hr', line 21, position 11.","Invalid JavaScript property identifier character: \". Path 'metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-5fe60d40bfb8ca140f465e1d8849dee7-c179e1ae77160e73-00"}
ResponseTime = 18.05.2023 00:18:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:2008}
Time = 18.05.2023 00:18:39
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000003
Body = {"errors":{"metadata.Hr":["Unterminated string. Expected delimiter: \". Path 'metadata.Hr', line 21, position 15.","Unexpected end when deserializing object. Path 'metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-e92bcc2f8e1f1afa9114186caf329fe4-6b8ac11b139c842b-00"}
ResponseTime = 18.05.2023 00:18:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "Metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:2008}
Time = 18.05.2023 00:19:58
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000005
Body = {"errors":{"Metadata.Hr":["Unterminated string. Expected delimiter: \". Path 'Metadata.Hr', line 21, position 15.","Unexpected end when deserializing object. Path 'Metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-723cf12959a9d630c5145c07048e5560-d66a1a15de916c05-00"}
ResponseTime = 18.05.2023 00:19:58
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008}
Time = 18.05.2023 00:20:29
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000007
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 21, position 15.","Unexpected end when deserializing object. Path 'metadata.hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-8b80516e0c6d455454ce8ff53187ba43-f58f9eddcf175396-00"}
ResponseTime = 18.05.2023 00:20:29
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008};}
}
Time = 18.05.2023 00:21:27
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000009
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 22, position 1.","Unexpected end when deserializing object. Path 'metadata.hr', line 22, position 1."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-a2271ac6d8c482fa9d39c12c7c9e90ea-7627080cb29fa97d-00"}
ResponseTime = 18.05.2023 00:21:27
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008}
}
Time = 18.05.2023 00:21:38
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:0000000B
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 22, position 1.","Unexpected end when deserializing object. Path 'metadata.hr', line 22, position 1."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-ca6ee9fa7eecf5b8263f0223df03a4cd-9985ddda795867d9-00"}
ResponseTime = 18.05.2023 00:21:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:24:18
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:25:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:27:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M4:00000011
Body = 
ResponseTime = 18.05.2023 00:27:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFG:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:18:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFG:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:18:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFH:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:18:56
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/Movies/DeleteMovie
IsSecured = True
QueryString = ?id=1
RequestBody = 
Time = 19.05.2023 23:20:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFI:00000001
Body = 
ResponseTime = 19.05.2023 23:20:02
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/Movies/DeleteMovie
IsSecured = True
QueryString = ?id=6
RequestBody = 
Time = 19.05.2023 23:20:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFI:00000003
Body = 
ResponseTime = 19.05.2023 23:20:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:20:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFJ:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:20:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 19.05.2023 23:20:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFK:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:20:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:22:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:22:52
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:22:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:22:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:24:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000009
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:24:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:24:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:25:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSJ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:25:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:25:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSJ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:25:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:28:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSK:00000001
Body = []
ResponseTime = 19.05.2023 23:28:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:29:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:32:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:32:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:32:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:32:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:33:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 19.05.2023 23:33:24
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:34:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOK0DUCQED:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:34:49
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:34:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOK0DUCQED:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wtf",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:34:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?wtf=asd
RequestBody = 
Time = 19.05.2023 23:35:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.05.2023 23:58:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDIAD2KGB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.05.2023 23:58:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.05.2023 23:58:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDIAD2KGC:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.05.2023 23:58:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:09:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40J:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:09:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:09:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40K:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:09:58
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:12:23
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40L:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:12:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:12:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40M:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:12:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:13:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40N:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:13:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:13:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40O:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:13:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:20:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDUHE45NI:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:20:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:20:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDUHE45NJ:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:20:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:20:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:22:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:22:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:22:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:22:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:23:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T4:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:23:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T5:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:23:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T6:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:30:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHU:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:30:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:30:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHU:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:30:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:30:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHV:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:30:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:30:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DI0:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:30:53
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:31:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DI1:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:31:02
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:31:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:33:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:33:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:33:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:33:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:34:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:34:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:35:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:0000000B
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:35:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:35:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:0000000D
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:35:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:59:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEKIIPAIC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:59:48
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:59:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEKIIPAIC:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:59:52
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:09:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE0:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 01:09:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:09:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE0:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 01:09:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Actors/GetAllActors
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:10:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE1:00000001
Body = [{"id":3,"name":"apapaapapapa","img":"string","movies":null},{"id":4,"name":"444444","img":"string","movies":null},{"id":5,"name":"asasasa","img":"ddddd","movies":null},{"id":6,"name":"qsvii","img":"string","movies":null},{"id":7,"name":"მიხო","img":"ფსიხო","movies":null},{"id":8,"name":"8888","img":"string","movies":null},{"id":9,"name":"wewewew","img":"string","movies":null},{"id":10,"name":"wqwqwqwq","img":"string","movies":null},{"id":11,"name":"bbbbbbbbbbbbbbbbbbbbbbbbb","img":"string","movies":null},{"id":14,"name":"cxrrrr","img":"string","movies":null},{"id":15,"name":"atttat","img":"string","movies":null},{"id":16,"name":"შორენა ბეგაშვილი","img":"ფოტო","movies":null},{"id":17,"name":"bames jond","img":"pict","movies":null}]
ResponseTime = 21.05.2023 01:10:54
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 21.05.2023 01:11:02
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPEPQOANE1:00000003
Body = 
ResponseTime = 21.05.2023 01:11:03
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 01:11:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE2:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2MTcwOTUsImV4cCI6MTY4NDYyMDY5NCwiaWF0IjoxNjg0NjE3MDk1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.7G7iU3XbM_jbpDtGFQqqDepBCvm0F64U62Lw-gAvQxo
ResponseTime = 21.05.2023 01:11:35
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 21.05.2023 01:11:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE3:00000001
Body = 
ResponseTime = 21.05.2023 01:11:53
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:16:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE4:00000005
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 01:16:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = {"query":"\n    query IntrospectionQuery {\n      __schema {\n        \n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n          \n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n      \n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n      \n      \n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  "}
Time = 21.05.2023 01:16:50
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPEPQOANE6:00000001
Body = 
ResponseTime = 21.05.2023 01:16:50
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html/v1/Actors/GetAllActors
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:18:11
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPEPQOANE7:00000001
Body = 
ResponseTime = 21.05.2023 01:18:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:18:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE6:00000002
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 01:18:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:20:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE6:00000003
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 01:20:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:21:12
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPEPQOANE6:00000004
Body = 
ResponseTime = 21.05.2023 01:21:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Actors/GetAllActors
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:21:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANE6:00000005
Body = [{"id":3,"name":"apapaapapapa","img":"string","movies":null},{"id":4,"name":"444444","img":"string","movies":null},{"id":5,"name":"asasasa","img":"ddddd","movies":null},{"id":6,"name":"qsvii","img":"string","movies":null},{"id":7,"name":"მიხო","img":"ფსიხო","movies":null},{"id":8,"name":"8888","img":"string","movies":null},{"id":9,"name":"wewewew","img":"string","movies":null},{"id":10,"name":"wqwqwqwq","img":"string","movies":null},{"id":11,"name":"bbbbbbbbbbbbbbbbbbbbbbbbb","img":"string","movies":null},{"id":14,"name":"cxrrrr","img":"string","movies":null},{"id":15,"name":"atttat","img":"string","movies":null},{"id":16,"name":"შორენა ბეგაშვილი","img":"ფოტო","movies":null},{"id":17,"name":"bames jond","img":"pict","movies":null},{"id":18,"name":"John Smith","img":"https://example.com/images/john-smith.jpg","movies":null}]
ResponseTime = 21.05.2023 01:21:32
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 21.05.2023 01:22:12
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPEPQOANEB:00000001
Body = 
ResponseTime = 21.05.2023 01:22:12
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 21.05.2023 01:23:19
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPEPQOANE6:00000006
Body = 
ResponseTime = 21.05.2023 01:23:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 01:23:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPEPQOANEB:00000003
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 01:23:36
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 21.05.2023 01:26:09
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPEPQOANE6:00000007
Body = 
ResponseTime = 21.05.2023 01:26:09
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = False
QueryString = 
RequestBody =  {
      
     "adminStatus":"true",
     "name":"Giorgi"
 }
Time = 5/21/2023 1:23:47 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPRKACBP2N:00000001
Body = []
ResponseTime = 5/21/2023 1:23:49 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = False
QueryString = 
RequestBody =   {
                "id":1,
                "title" : "The Shawshank Redemption",
                "color" : "Green",
                "color2" : "Yellow",
                "img" : "https://www.example.com/images/shawshank_redemption.jpg",
                "video" :"https://www.example.com/videos/shawshank_redemption.mp4",
               " description" : "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
          
            "actors":[
                "bla",
                "bla",
                "bla"
            ], "metadata":{
                "hr":"ahah",
                "year":1999,
                "genre":"sci"
            }
            } 
Time = 5/21/2023 1:27:41 PM
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPRKACBP2P:00000001
Body = 
ResponseTime = 5/21/2023 1:27:41 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = False
QueryString = 
RequestBody =   {
                "id":1,
                "title" : "The Shawshank Redemption",
                "color" : "Green",
                "color2" : "Yellow",
                "img" : "https://www.example.com/images/shawshank_redemption.jpg",
                "video" :"https://www.example.com/videos/shawshank_redemption.mp4",
               " description" : "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
          
            "actors":[
                "bla",
                "bla",
                "bla"
            ], "metadata":{
                "hr":"ahah",
                "year":1999,
                "genre":"sci"
            }
            } 
Time = 5/21/2023 1:27:47 PM
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPRKACBP2P:00000002
Body = 
ResponseTime = 5/21/2023 1:27:47 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = False
QueryString = 
RequestBody =   {
                "id":1,
                "title" : "The Shawshank Redemption",
                "color" : "Green",
                "color2" : "Yellow",
                "img" : "https://www.example.com/images/shawshank_redemption.jpg",
                "video" :"https://www.example.com/videos/shawshank_redemption.mp4",
               " description" : "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
          
            "actors":[
                "bla",
                "bla",
                "bla"
            ], "metadata":{
                "hr":"ahah",
                "year":1999,
                "genre":"sci"
            }
            } 
Time = 5/21/2023 1:27:48 PM
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPRKACBP2P:00000003
Body = 
ResponseTime = 5/21/2023 1:27:48 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = False
QueryString = 
RequestBody =   {
                "id":1,
                "title" : "The Shawshank Redemption",
                "color" : "Green",
                "color2" : "Yellow",
                "img" : "https://www.example.com/images/shawshank_redemption.jpg",
                "video" :"https://www.example.com/videos/shawshank_redemption.mp4",
               " description" : "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
          
          
            } 
Time = 5/21/2023 1:28:05 PM
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPRKACBP2P:00000004
Body = 
ResponseTime = 5/21/2023 1:28:05 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = False
QueryString = 
RequestBody =   {
                "id":1,
                "title" : "The Shawshank Redemption",
                "color" : "Green",
                "color2" : "Yellow",
                "img" : "https://www.example.com/images/shawshank_redemption.jpg",
                "video" :"https://www.example.com/videos/shawshank_redemption.mp4",
               " description" : "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
          
          
            } 
Time = 5/21/2023 1:28:06 PM
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQPRKACBP2P:00000005
Body = 
ResponseTime = 5/21/2023 1:28:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:40:18 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2R:00000001
Body = 
ResponseTime = 5/21/2023 1:40:18 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:44:21 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2T:00000001
Body = 
ResponseTime = 5/21/2023 1:44:21 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:44:22 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2T:00000002
Body = 
ResponseTime = 5/21/2023 1:44:22 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:44:23 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2T:00000003
Body = 
ResponseTime = 5/21/2023 1:44:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:44:33 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2T:00000004
Body = 
ResponseTime = 5/21/2023 1:44:33 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:52:38 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000001
Body = 
ResponseTime = 5/21/2023 1:52:38 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:52:59 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000002
Body = 
ResponseTime = 5/21/2023 1:52:59 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:53:05 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000003
Body = 
ResponseTime = 5/21/2023 1:53:05 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:53:06 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000004
Body = 
ResponseTime = 5/21/2023 1:53:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:53:06 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000005
Body = 
ResponseTime = 5/21/2023 1:53:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:53:07 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP2U:00000006
Body = 
ResponseTime = 5/21/2023 1:53:07 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki1!"
}
Time = 5/21/2023 1:56:06 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP30:00000001
Body = 
ResponseTime = 5/21/2023 1:56:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 1:59:19 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP32:00000001
Body = 
ResponseTime = 5/21/2023 1:59:19 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 1:59:39 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP33:00000001
Body = 
ResponseTime = 5/21/2023 1:59:39 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 2:00:00 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP33:00000002
Body = 
ResponseTime = 5/21/2023 2:00:00 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"akaki@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:02:32 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP35:00000001
Body = 
ResponseTime = 5/21/2023 2:02:32 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"akaki@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:02:34 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP35:00000002
Body = 
ResponseTime = 5/21/2023 2:02:34 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"akaki@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:02:35 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP35:00000003
Body = 
ResponseTime = 5/21/2023 2:02:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"akaki@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:02:36 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP35:00000004
Body = 
ResponseTime = 5/21/2023 2:02:36 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:07:01 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP37:00000001
Body = 
ResponseTime = 5/21/2023 2:07:01 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:07:10 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP37:00000002
Body = 
ResponseTime = 5/21/2023 2:07:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:07:38 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP37:00000003
Body = 
ResponseTime = 5/21/2023 2:07:38 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:11:29 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP39:00000001
Body = 
ResponseTime = 5/21/2023 2:11:29 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:11:32 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP39:00000002
Body = 
ResponseTime = 5/21/2023 2:11:32 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:11:33 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP39:00000003
Body = 
ResponseTime = 5/21/2023 2:11:33 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:11:34 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP39:00000004
Body = 
ResponseTime = 5/21/2023 2:11:34 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:11:34 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP39:00000005
Body = 
ResponseTime = 5/21/2023 2:11:34 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 2:13:15 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3A:00000001
Body = 
ResponseTime = 5/21/2023 2:13:15 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:21:04 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3C:00000001
Body = 
ResponseTime = 5/21/2023 2:21:04 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:21:12 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3C:00000002
Body = 
ResponseTime = 5/21/2023 2:21:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:30:41 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000001
Body = 
ResponseTime = 5/21/2023 2:30:41 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:30:42 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000002
Body = 
ResponseTime = 5/21/2023 2:30:42 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:30:51 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000003
Body = 
ResponseTime = 5/21/2023 2:30:51 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:30:57 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000004
Body = 
ResponseTime = 5/21/2023 2:30:57 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:31:00 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000005
Body = 
ResponseTime = 5/21/2023 2:31:00 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:31:10 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000006
Body = 
ResponseTime = 5/21/2023 2:31:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:31:11 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000007
Body = 
ResponseTime = 5/21/2023 2:31:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /Login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:31:12 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000008
Body = 
ResponseTime = 5/21/2023 2:31:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:33:12 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:00000009
Body = 
ResponseTime = 5/21/2023 2:33:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:33:14 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:0000000A
Body = 
ResponseTime = 5/21/2023 2:33:14 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:33:33 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:0000000B
Body = 
ResponseTime = 5/21/2023 2:33:33 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:33:39 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3E:0000000C
Body = 
ResponseTime = 5/21/2023 2:33:39 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 2:33:54 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPRKACBP3F:00000001
Body = 
ResponseTime = 5/21/2023 2:33:54 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:40:41 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF3:00000001
Body = 
ResponseTime = 5/21/2023 2:40:41 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:40:52 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF3:00000002
Body = 
ResponseTime = 5/21/2023 2:40:52 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 2:40:54 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF3:00000003
Body = 
ResponseTime = 5/21/2023 2:40:54 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllActors
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 3:04:09 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF5:00000001
Body = 
ResponseTime = 5/21/2023 3:04:09 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllActors
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 3:04:14 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF5:00000002
Body = 
ResponseTime = 5/21/2023 3:04:14 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllActors
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 3:04:15 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF5:00000003
Body = 
ResponseTime = 5/21/2023 3:04:15 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 3:04:25 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF5:00000004
Body = 
ResponseTime = 5/21/2023 3:04:25 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com", "password":"Akaki!1"
}
Time = 5/21/2023 3:04:26 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPSV9F0JF5:00000005
Body = 
ResponseTime = 5/21/2023 3:04:26 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:04:59 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTCRS502B:00000001
Body = 
ResponseTime = 5/21/2023 3:04:59 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:05:51 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTCRS502B:00000002
Body = 
ResponseTime = 5/21/2023 3:05:51 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:06:07 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTCRS502B:00000003
Body = 
ResponseTime = 5/21/2023 3:06:07 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:08:27 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000001
Body = 
ResponseTime = 5/21/2023 3:08:27 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /v1/GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:09:04 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000002
Body = 
ResponseTime = 5/21/2023 3:09:04 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:09:44 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPTEPR8Q11:00000003
Body = []
ResponseTime = 5/21/2023 3:09:45 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /v1/Movies/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:10:20 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000004
Body = 
ResponseTime = 5/21/2023 3:10:20 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:10:45 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000005
Body = 
ResponseTime = 5/21/2023 3:10:45 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Movies/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:10:58 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000006
Body = 
ResponseTime = 5/21/2023 3:10:58 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Movies/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:11:00 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q11:00000007
Body = 
ResponseTime = 5/21/2023 3:11:00 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/user/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:13:22 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000001
Body = 
ResponseTime = 5/21/2023 3:13:22 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/user/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:13:23 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000002
Body = 
ResponseTime = 5/21/2023 3:13:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/User/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:13:26 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000003
Body = 
ResponseTime = 5/21/2023 3:13:26 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:13:32 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000004
Body = 
ResponseTime = 5/21/2023 3:13:32 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:14:46 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:00000005
Body = 
ResponseTime = 5/21/2023 3:14:46 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:14:47 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:00000006
Body = 
ResponseTime = 5/21/2023 3:14:47 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Auth/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:14:52 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000007
Body = 
ResponseTime = 5/21/2023 3:14:52 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Auth/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:14:54 PM
Response logged from middleware StatusCode = 404
TraceIdentifier = 0HMQPTEPR8Q13:00000008
Body = 
ResponseTime = 5/21/2023 3:14:54 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:15:38 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:00000009
Body = 
ResponseTime = 5/21/2023 3:15:38 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/login
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:15:40 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:0000000A
Body = 
ResponseTime = 5/21/2023 3:15:40 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:16:48 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:0000000B
Body = 
ResponseTime = 5/21/2023 3:16:48 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 3:17:21 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q14:00000001
Body = 
ResponseTime = 5/21/2023 3:17:21 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:18:00 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:0000000C
Body = 
ResponseTime = 5/21/2023 3:18:00 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "Akaki!1":"Akaki!1"
}
Time = 5/21/2023 3:18:02 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q13:0000000D
Body = 
ResponseTime = 5/21/2023 3:18:02 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "password":"Akaki!1"
}
Time = 5/21/2023 3:22:26 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000001
Body = 
ResponseTime = 5/21/2023 3:22:26 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "password":"Akaki!1"
}
Time = 5/21/2023 3:22:28 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000002
Body = 
ResponseTime = 5/21/2023 3:22:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "password":"Akaki!1"
}
Time = 5/21/2023 3:22:29 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000003
Body = 
ResponseTime = 5/21/2023 3:22:29 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "Username":"Admin@gmail.com",
    "Password":"Akaki!1"
}
Time = 5/21/2023 3:22:35 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000004
Body = 
ResponseTime = 5/21/2023 3:22:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "Username":"Admin@gmail.com",
    "Password":"Akaki!1"
}
Time = 5/21/2023 3:22:36 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000005
Body = 
ResponseTime = 5/21/2023 3:22:36 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "password":"Akaki!1"
}
Time = 5/21/2023 3:22:42 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000006
Body = 
ResponseTime = 5/21/2023 3:22:42 PM
 logged from Middleware
IP = ::1
Address = http
Method = GET
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {
    "username":"Admin@gmail.com",
    "password":"Akaki!1"
}
Time = 5/21/2023 3:23:44 PM
Response logged from middleware StatusCode = 405
TraceIdentifier = 0HMQPTEPR8Q16:00000007
Body = 
ResponseTime = 5/21/2023 3:23:44 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 4:28:04 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD29:00000001
Body = 
ResponseTime = 5/21/2023 4:28:04 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 4:28:04 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD29:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzIwODUsImV4cCI6MTY4NDY3NTY4NSwiaWF0IjoxNjg0NjcyMDg1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.Z7_-u5zcUHjNjXeMQRLf0xHn557lQxAYzuiGM5omhf4
ResponseTime = 5/21/2023 4:28:05 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:02:05 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2A:00000001
Body = 
ResponseTime = 5/21/2023 5:02:05 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:02:05 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2A:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzQxMjYsImV4cCI6MTY4NDY3NzcyNiwiaWF0IjoxNjg0Njc0MTI2LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.xbjI4O1nLGpp0zStkzX0aRrIeqDx8Ms78wLnMgYxdHw
ResponseTime = 5/21/2023 5:02:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:07:58 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2B:00000001
Body = 
ResponseTime = 5/21/2023 5:07:58 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:07:58 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2B:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzQ0NzgsImV4cCI6MTY4NDY3ODA3OCwiaWF0IjoxNjg0Njc0NDc4LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.XCOlKTofdDYSrYuPPTk2TXcB4wc_s23Fh9ZZz25ogjM
ResponseTime = 5/21/2023 5:07:58 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:18:23 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2C:00000001
Body = 
ResponseTime = 5/21/2023 5:18:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:18:23 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2C:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzUxMDMsImV4cCI6MTY4NDY3ODcwMywiaWF0IjoxNjg0Njc1MTAzLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.lnN8Mn1_K4deI8jVNSdJ4M3ZOALjxbhqXFzj_bFDsaI
ResponseTime = 5/21/2023 5:18:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:23:49 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:00000001
Body = 
ResponseTime = 5/21/2023 5:23:49 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:23:49 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU0MjksImV4cCI6MTY4NDY3OTAyOSwiaWF0IjoxNjg0Njc1NDI5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.rjSr9CRHVht7o4tR0Jou7Ui96aDW52TSDn_n6DR5-9g
ResponseTime = 5/21/2023 5:23:49 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:24:32 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:00000003
Body = 
ResponseTime = 5/21/2023 5:24:32 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:24:32 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:00000004
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU0NzIsImV4cCI6MTY4NDY3OTA3MiwiaWF0IjoxNjg0Njc1NDcyLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.uZnAZ6k1GPN7soyjoCrQNwqWFBqtdTpENOtBjZW6gSg
ResponseTime = 5/21/2023 5:24:32 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:25:37 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:00000005
Body = 
ResponseTime = 5/21/2023 5:25:37 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:25:37 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:00000006
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU1MzcsImV4cCI6MTY4NDY3OTEzNywiaWF0IjoxNjg0Njc1NTM3LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.HcAsdLrmGZnSqAWSBvoEjXaFWRddY301KJxN-7WCHSA
ResponseTime = 5/21/2023 5:25:37 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:26:26 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:00000007
Body = 
ResponseTime = 5/21/2023 5:26:26 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:26:26 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:00000008
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU1ODYsImV4cCI6MTY4NDY3OTE4NiwiaWF0IjoxNjg0Njc1NTg2LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.eYh-Vk3g7po-iqNSonpYXjNwJsWIraGuXMSefYlwcHI
ResponseTime = 5/21/2023 5:26:26 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:26:43 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:00000009
Body = 
ResponseTime = 5/21/2023 5:26:43 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:26:43 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:0000000A
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU2MDMsImV4cCI6MTY4NDY3OTIwMywiaWF0IjoxNjg0Njc1NjAzLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.7OeIdI1TSUiOsv-mtjUkHY3fR78xLg2Wsn3wT2Ykvkk
ResponseTime = 5/21/2023 5:26:43 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:26:58 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:0000000B
Body = 
ResponseTime = 5/21/2023 5:26:58 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:26:58 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:0000000C
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU2MTksImV4cCI6MTY4NDY3OTIxOSwiaWF0IjoxNjg0Njc1NjE5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.affdqp7j9iDnWDuyA5qgGJcQV5bZdSqyQlKgkbZUVg0
ResponseTime = 5/21/2023 5:26:59 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 5:27:11 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2D:0000000D
Body = 
ResponseTime = 5/21/2023 5:27:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 5:27:11 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2D:0000000E
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzU2MzIsImV4cCI6MTY4NDY3OTIzMiwiaWF0IjoxNjg0Njc1NjMyLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.CqpyS8pRG4fwQjisVV_HCelZTRGLi24mstWSVkNicP0
ResponseTime = 5/21/2023 5:27:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:28:28 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2E:00000001
Body = 
ResponseTime = 5/21/2023 6:28:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:28:28 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2E:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2NzkzMDgsImV4cCI6MTY4NDY4MjkwOCwiaWF0IjoxNjg0Njc5MzA4LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.f1xRvv2Rnol7aFcBi1sfDemiCQwo8SSNbi-a93i2Ixg
ResponseTime = 5/21/2023 6:28:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:31:23 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2F:00000001
Body = 
ResponseTime = 5/21/2023 6:31:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:31:23 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2F:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk0ODMsImV4cCI6MTY4NDY4MzA4MywiaWF0IjoxNjg0Njc5NDgzLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.ImfNeEa4d927RJn49JukQiRYmt4ixDFlHkmHDVDiQ9M
ResponseTime = 5/21/2023 6:31:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:33:01 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2F:00000003
Body = 
ResponseTime = 5/21/2023 6:33:01 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:33:01 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2F:00000004
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk1ODEsImV4cCI6MTY4NDY4MzE4MSwiaWF0IjoxNjg0Njc5NTgxLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.AZfwR3sx2qnzi7xUaL-EYRk06WLuZCjm4XXZiPNgHQA
ResponseTime = 5/21/2023 6:33:01 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:33:42 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2F:00000005
Body = 
ResponseTime = 5/21/2023 6:33:42 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:33:42 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2F:00000006
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk2MjIsImV4cCI6MTY4NDY4MzIyMiwiaWF0IjoxNjg0Njc5NjIyLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.nVPXgyB5jBJGp8xukLhe4DIkTj1KlxCAMSb3p-gnYT4
ResponseTime = 5/21/2023 6:33:42 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:34:35 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2F:00000007
Body = 
ResponseTime = 5/21/2023 6:34:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:34:35 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2F:00000008
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk2NzUsImV4cCI6MTY4NDY4MzI3NSwiaWF0IjoxNjg0Njc5Njc1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.3GvOQ7K4Q57yjjZ6JeSSzi6CeqOfPioLUie-Ja7c_yY
ResponseTime = 5/21/2023 6:34:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:36:14 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2F:00000009
Body = 
ResponseTime = 5/21/2023 6:36:14 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:36:15 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2F:0000000A
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk3NzUsImV4cCI6MTY4NDY4MzM3NSwiaWF0IjoxNjg0Njc5Nzc1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.M_0kYQbTiWR6syg0p7brdw2Ii2hxCNfMV4cuKVFHC_Q
ResponseTime = 5/21/2023 6:36:15 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:39:51 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:00000001
Body = 
ResponseTime = 5/21/2023 6:39:51 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:39:51 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2Nzk5OTEsImV4cCI6MTY4NDY4MzU5MSwiaWF0IjoxNjg0Njc5OTkxLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.Nb8bBXNF0LguP-teLNcPAbfPY8zFQE61k5gJqvK15dw
ResponseTime = 5/21/2023 6:39:51 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:41:52 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:00000003
Body = 
ResponseTime = 5/21/2023 6:41:52 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:41:52 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:00000004
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODAxMTIsImV4cCI6MTY4NDY4MzcxMiwiaWF0IjoxNjg0NjgwMTEyLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.FFMqElhpToHmc9eheevX88VnF8-s0PU5PqO8EOvdJAE
ResponseTime = 5/21/2023 6:41:52 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:42:23 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:00000005
Body = 
ResponseTime = 5/21/2023 6:42:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:42:23 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:00000006
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODAxNDMsImV4cCI6MTY4NDY4Mzc0MywiaWF0IjoxNjg0NjgwMTQzLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.ZSka9VhMtJedifHGepe9vsZqyIZbUgonlIsNadVQsZY
ResponseTime = 5/21/2023 6:42:23 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:44:10 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:00000007
Body = 
ResponseTime = 5/21/2023 6:44:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:44:10 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:00000008
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODAyNTAsImV4cCI6MTY4NDY4Mzg1MCwiaWF0IjoxNjg0NjgwMjUwLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.rQGWNWtYOSkGzry2ssHOnckevwkpOYqc9F98ayoAS7g
ResponseTime = 5/21/2023 6:44:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:45:24 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:00000009
Body = 
ResponseTime = 5/21/2023 6:45:24 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:45:24 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:0000000A
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODAzMjQsImV4cCI6MTY4NDY4MzkyNCwiaWF0IjoxNjg0NjgwMzI0LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.-IGqb5ccC_g2zdj2XwMI6SDowWAJnkYViWTGzHfX3uc
ResponseTime = 5/21/2023 6:45:24 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:45:36 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2G:0000000B
Body = 
ResponseTime = 5/21/2023 6:45:36 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:45:36 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2G:0000000C
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODAzMzYsImV4cCI6MTY4NDY4MzkzNiwiaWF0IjoxNjg0NjgwMzM2LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.wt-UiALms87TF3x0dWEXzYnxja7P8-jjCu6I1aLhaEs
ResponseTime = 5/21/2023 6:45:36 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:53:47 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2H:00000001
Body = 
ResponseTime = 5/21/2023 6:53:47 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:53:48 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2H:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODA4MjgsImV4cCI6MTY4NDY4NDQyOCwiaWF0IjoxNjg0NjgwODI4LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.Q0mmLSt9R22kAJQrPKYOzYnk5wlZhS9ho4U0gygpv3E
ResponseTime = 5/21/2023 6:53:48 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 6:54:11 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2H:00000003
Body = 
ResponseTime = 5/21/2023 6:54:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 6:54:11 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2H:00000004
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODA4NTEsImV4cCI6MTY4NDY4NDQ1MSwiaWF0IjoxNjg0NjgwODUxLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.XKb2Z7yFd7piP_RHj5_Q1V7soi_EhNDvRDy8JcKNpuE
ResponseTime = 5/21/2023 6:54:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:25:10 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2I:00000001
Body = 
ResponseTime = 5/21/2023 7:25:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:25:10 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2I:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODI3MTAsImV4cCI6MTY4NDY4NjMxMCwiaWF0IjoxNjg0NjgyNzEwLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.Fo3DiuqYjdDpkjJNV9G9kLk1w4oFblB3nmr-s4hkeVA
ResponseTime = 5/21/2023 7:25:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:29:57 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2J:00000001
Body = 
ResponseTime = 5/21/2023 7:29:57 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:29:57 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2J:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODI5OTcsImV4cCI6MTY4NDY4NjU5NywiaWF0IjoxNjg0NjgyOTk3LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.dqbdwUKo096A4NevfkDvf1_eQbBdtkDY--a5BaExmuI
ResponseTime = 5/21/2023 7:29:57 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:38:10 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2K:00000001
Body = 
ResponseTime = 5/21/2023 7:38:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:38:10 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2K:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODM0OTAsImV4cCI6MTY4NDY4NzA5MCwiaWF0IjoxNjg0NjgzNDkwLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.jSHKQoxIj5r2hIf3fzadpyiOaAldi-kLoBLoIpWkWk8
ResponseTime = 5/21/2023 7:38:10 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:38:28 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2K:00000003
Body = 
ResponseTime = 5/21/2023 7:38:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:38:28 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2K:00000004
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODM1MDgsImV4cCI6MTY4NDY4NzEwOCwiaWF0IjoxNjg0NjgzNTA4LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.jzEFH_xylQPpQH0xhy1siEvPvB5z0K9UxjOsJ3AD4i0
ResponseTime = 5/21/2023 7:38:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:42:09 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2L:00000001
Body = 
ResponseTime = 5/21/2023 7:42:09 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:42:09 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2L:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODM3MjksImV4cCI6MTY4NDY4NzMyOSwiaWF0IjoxNjg0NjgzNzI5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.CwhXM8Xcwpt1eKIdfcNGp4XpQ4ZAMwUYW3NedYPP5aE
ResponseTime = 5/21/2023 7:42:09 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 7:48:11 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2M:00000001
Body = 
ResponseTime = 5/21/2023 7:48:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"Admin@gmail.com","password":"Akaki!1"}
Time = 5/21/2023 7:48:11 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2M:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2ODQwOTEsImV4cCI6MTY4NDY4NzY5MSwiaWF0IjoxNjg0Njg0MDkxLCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.sGl7QTwz_quR9TD2QUew3PPGuGXg6-AZ37adJd1ASIQ
ResponseTime = 5/21/2023 7:48:11 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"gio@gmail.com",
    "password":"1234"
}
Time = 5/21/2023 8:04:08 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2O:00000001
Body = 
ResponseTime = 5/21/2023 8:04:08 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:04:28 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2P:00000001
Body = 
ResponseTime = 5/21/2023 8:04:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/LogIn
IsSecured = False
QueryString = 
RequestBody = {"username":"gio@gmail.com","password":"1234"}
Time = 5/21/2023 8:04:28 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2P:00000002
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Imdpb0BnbWFpbC5jb20iLCJVc2VySWQiOiIyIiwicm9sZSI6IlVzZXIiLCJuYmYiOjE2ODQ2ODUwNjgsImV4cCI6MTY4NDY4ODY2OCwiaWF0IjoxNjg0Njg1MDY4LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.HPOZzp-MNluz7vsv6_spme-IjLAqMqurFMTXU_kTScI
ResponseTime = 5/21/2023 8:04:28 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:16:01 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2Q:00000001
Body = 
ResponseTime = 5/21/2023 8:16:01 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"gio@gmail.com","password":"1234"}
Time = 5/21/2023 8:16:01 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:24:06 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2R:00000001
Body = 
ResponseTime = 5/21/2023 8:24:06 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"giogio@gmail.com","password":"1234"}
Time = 5/21/2023 8:24:06 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2R:00000002
Body = 
ResponseTime = 5/21/2023 8:24:07 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:24:35 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2R:00000003
Body = 
ResponseTime = 5/21/2023 8:24:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"giogio@gmail.com","password":"1234"}
Time = 5/21/2023 8:24:35 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:25:12 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2R:00000005
Body = 
ResponseTime = 5/21/2023 8:25:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"giogio@gmail.com","password":"1234"}
Time = 5/21/2023 8:25:12 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:25:41 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2R:00000007
Body = 
ResponseTime = 5/21/2023 8:25:41 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"giogio@gmail.com","password":"1234"}
Time = 5/21/2023 8:25:41 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {
    "username":"giGo@gmail.com",
    "password":"1234"
}
Time = 5/21/2023 8:26:55 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2T:00000001
Body = 
ResponseTime = 5/21/2023 8:26:56 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:30:22 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2U:00000001
Body = 
ResponseTime = 5/21/2023 8:30:22 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"kako12@gmail.com","password":"1234"}
Time = 5/21/2023 8:30:22 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2U:00000002
Body = 
ResponseTime = 5/21/2023 8:30:22 PM
 logged from Middleware
IP = ::1
Address = http
Method = OPTIONS
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = 
Time = 5/21/2023 8:31:59 PM
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQPUR9MOD2U:00000003
Body = 
ResponseTime = 5/21/2023 8:31:59 PM
 logged from Middleware
IP = ::1
Address = http
Method = POST
Path = /api/Authorization/Register
IsSecured = False
QueryString = 
RequestBody = {"username":"kako18@gmail.com","password":"1234"}
Time = 5/21/2023 8:31:59 PM
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPUR9MOD2U:00000004
Body = 
ResponseTime = 5/21/2023 8:31:59 PM
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:03:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ3L5707EB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 21:03:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:03:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ3L5707EB:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 21:03:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:19:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ3TU33PH4:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 21:19:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:19:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ3TU33PH4:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 21:19:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:19:48
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:32:23
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ45B1GR7K:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 21:32:24
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:32:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ45B1GR7K:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 21:32:28
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:33:22
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:34:16
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:35:38
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:37:25
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:39:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:50:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4FH46VKN:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 21:50:38
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:50:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4FH46VKN:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 21:50:41
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:51:03
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:53:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:56:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4IUL7JFI:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 21:56:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 21:56:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4IUL7JFI:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 21:56:48
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:57:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 21:57:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:00:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4KS1RIBV:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:00:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:00:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4KS1RIBV:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:00:15
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:00:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:01:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:03:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4MNNQQ7T:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:03:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:03:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ4MNNQQ7T:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:03:35
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:04:03
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:05:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:33:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ57CB99EQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:33:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:33:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ57CB99EQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:33:20
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:33:38
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:35:30
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:37:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ57CB99EQ:0000000D
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ2OTQyNTksImV4cCI6MTY4NDY5Nzg1OSwiaWF0IjoxNjg0Njk0MjU5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.7I9BYFCFGUqS_n3TM_l2NY4nhjbml69rNlkFDVdcAlw
ResponseTime = 21.05.2023 22:37:52
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:38:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:38:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:42:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5CHN44Q8:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:42:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:42:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5CHN44Q8:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:42:36
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:42:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:43:01
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:43:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:49:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5GIOTO83:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:49:46
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:49:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5GIOTO83:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:49:48
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:49:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:51:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5HP5UEMV:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:51:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:51:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5HP5UEMV:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:51:57
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:52:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:54:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5J623GDR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 22:54:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 22:54:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5J623GDR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 22:54:27
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:54:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 22:57:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:04:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5OHFJO1B:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 23:04:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:04:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5OHFJO1B:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 23:04:03
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 23:04:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:12:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5THHQH5D:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 23:12:58
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:12:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5THHQH5D:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 23:13:00
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 23:13:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5THHQH5D:00000009
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1pcWVsYUBnbWFpbC5jb20iLCJVc2VySWQiOiIyNiIsInJvbGUiOiJVc2VyIiwibmJmIjoxNjg0Njk2Mzk0LCJleHAiOjE2ODQ2OTk5OTQsImlhdCI6MTY4NDY5NjM5NCwiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.xppCcs_wnrgoxH7fzeg1TBMuPvy4dsGp3VT-U5GMifo
ResponseTime = 21.05.2023 23:13:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:13:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ5THHQH5D:0000000B
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 23:13:36
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:22:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ6310I4V5:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 23:22:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 23:22:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ6310I4V5:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 23:22:54
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqela@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 23:23:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ6310I4V6:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1pcWVsYUBnbWFpbC5jb20iLCJVc2VySWQiOiIyNyIsInJvbGUiOiJVc2VyIiwibmJmIjoxNjg0Njk2OTkzLCJleHAiOjE2ODQ3MDA1OTMsImlhdCI6MTY4NDY5Njk5MywiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.GbgjZoDMGhB2fuhFk8gfxxEsVBbd-X3xH3Y7qhg-aIA
ResponseTime = 21.05.2023 23:23:13
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Matrix",
  "color": "Green",
  "color2": "Black",
  "img": "https://www.example.com/the-matrix.jpg",
  "video": "https://www.example.com/the-matrix.mp4",
  "description": "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
  "rating": {
    "imDb": 8.7,
    "rottenTomatoes": 87
  },
  "actors": [
    "Keanu Reeves",
    "Carrie-Anne Moss",
    "Laurence Fishburne"
  ],
  "metadata": {
    "hr": "2h 16m",
    "year": 1999,
    "genre": "Sci-Fi"
  }
}
Time = 21.05.2023 23:24:09
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQQ6310I4V7:00000001
Body = 
ResponseTime = 21.05.2023 23:24:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "username": "miqelaa@gmail.com",
  "password": "Akaki!1"
}
Time = 21.05.2023 23:24:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ6310I4V8:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6Im1pcWVsYWFAZ21haWwuY29tIiwiVXNlcklkIjoiMjgiLCJyb2xlIjoiVXNlciIsIm5iZiI6MTY4NDY5NzA5MiwiZXhwIjoxNjg0NzAwNjkyLCJpYXQiOjE2ODQ2OTcwOTIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.nmM1akYqE4Qc7_-F3SVHEZBsriYs2HBxhaDwvjx7vtc
ResponseTime = 21.05.2023 23:25:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:28:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ77NNF4U0:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 00:28:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:28:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ77NNF4U0:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The movie's pagination filter.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Pagination.PaginationFilter": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 00:28:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:31:16
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ799TQ6M4:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 00:31:17
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:31:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ799TQ6M4:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The movie's pagination filter.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Pagination.PaginationFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Pagination.PaginationFilter": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 00:31:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:33:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ7ABJEUKV:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 00:33:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 00:33:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ7ABJEUKV:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 00:33:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?PageNumber=2&PageSize=3
RequestBody = 
Time = 22.05.2023 00:33:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ7ABJEUL0:00000001
Body = [{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 22.05.2023 00:33:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?PageNumber=1&PageSize=3
RequestBody = 
Time = 22.05.2023 00:33:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQ7ABJEUL1:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 22.05.2023 00:33:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 15:00:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQMEVM9AE7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 15:00:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 15:00:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQMEVM9AE7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 15:00:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?PageNumber=2&PageSize=4
RequestBody = 
Time = 22.05.2023 15:01:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQMEVM9AE7:00000009
Body = [{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 22.05.2023 15:01:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 15:02:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQMG460KLD:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 15:02:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 15:02:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQMG460KLD:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 15:02:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:13:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQNNSK93EB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 16:13:39
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:13:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQNNSK93EB:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 16:13:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:31:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQNNSK93EC:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:31:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year
RequestBody = 
Time = 22.05.2023 16:32:05
Response logged from middleware StatusCode = 204
TraceIdentifier = 0HMQQNNSK93EC:00000003
Body = 
ResponseTime = 22.05.2023 16:32:05
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year
RequestBody = 
Time = 22.05.2023 16:32:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:51:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 16:51:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:51:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 16:51:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:52:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:52:02
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year
RequestBody = 
Time = 22.05.2023 16:52:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:0000000B
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:52:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=imdbrating
RequestBody = 
Time = 22.05.2023 16:52:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:0000000D
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:52:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=IMDbRating
RequestBody = 
Time = 22.05.2023 16:53:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOD0KJ9LV:0000000F
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:53:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=IMDbRating
RequestBody = 
Time = 22.05.2023 16:53:38
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:54:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 16:54:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 16:54:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 16:54:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year
RequestBody = 
Time = 22.05.2023 16:54:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000009
Body = [{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}}]
ResponseTime = 22.05.2023 16:54:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=imdbrating
RequestBody = 
Time = 22.05.2023 16:55:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:0000000B
Body = [{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}}]
ResponseTime = 22.05.2023 16:55:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=rtrating
RequestBody = 
Time = 22.05.2023 16:55:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:0000000D
Body = [{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}}]
ResponseTime = 22.05.2023 16:55:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=asdasd
RequestBody = 
Time = 22.05.2023 16:55:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:0000000F
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2009,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 16:55:50
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year&genre=asd
RequestBody = 
Time = 22.05.2023 16:57:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000011
Body = []
ResponseTime = 22.05.2023 16:57:36
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year&year=2003
RequestBody = 
Time = 22.05.2023 17:01:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000013
Body = [{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}}]
ResponseTime = 22.05.2023 17:01:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=year&year=2003
RequestBody = 
Time = 22.05.2023 17:01:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQOEM7KN32:00000015
Body = [{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}}]
ResponseTime = 22.05.2023 17:01:34
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 17:41:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQP911M56J:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 17:41:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 17:41:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQP911M56J:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 17:41:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?year=2003
RequestBody = 
Time = 22.05.2023 17:42:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQP911M56J:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6.0,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4.0,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3.0,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2.0,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 22.05.2023 17:42:52
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 22:29:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQUA41U7NR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 22.05.2023 22:29:52
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 22.05.2023 22:29:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQUA41U7NR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 22.05.2023 22:29:56
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 22.05.2023 22:31:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQUA41U7NR:00000009
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQ3ODAyNjksImV4cCI6MTY4NDc4Mzg2OSwiaWF0IjoxNjg0NzgwMjY5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.9xcgShntLBqeMxOhYMlFEXTBK4Lwvh4gNzsKhP9mrsU
ResponseTime = 22.05.2023 22:31:18
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "hr": "2h 32m",
    "year": 2008,
    "genre": "Action"
  }
}
Time = 22.05.2023 22:31:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQUA41U7NR:0000000B
Body = 
ResponseTime = 22.05.2023 22:31:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Matrix",
  "color": "Green",
  "color2": "Black",
  "img": "https://www.example.com/the-matrix.jpg",
  "video": "https://www.example.com/the-matrix.mp4",
  "description": "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
  "rating": {
    "imDb": 8.7,
    "rottenTomatoes": 87
  },

  "metadata": {
    "hr": "2h 16m",
    "year": 1999,
    "genre": "Sci-Fi"
  }
}
Time = 22.05.2023 22:35:04
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Matrix",
  "color": "Green",
  "color2": "Black",
  "img": "https://www.example.com/the-matrix.jpg",
  "video": "https://www.example.com/the-matrix.mp4",
  "description": "A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.",
  "rating": {
    "imDb": 8.7,
    "rottenTomatoes": 87
  },
  "actors": [

  ],
  "metadata": {
    "hr": "2h 16m",
    "year": 1999,
    "genre": "Sci-Fi"
  }
}
Time = 22.05.2023 22:35:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQQUA41U7NR:0000000F
Body = 
ResponseTime = 22.05.2023 22:35:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:15:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRGTCA0A9B:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 16:15:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:15:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRGTCA0A9B:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 16:15:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:16:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:20:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRH05SCH1C:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 16:20:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:20:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRH05SCH1C:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 16:20:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:49:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHGQK3AMU:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 16:49:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:49:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHGQK3AMU:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 16:49:58
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:55:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHJU47E8A:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 16:55:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 16:55:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHJU47E8A:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 16:55:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 17:10:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHSFOBOCG:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 17:10:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 17:10:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRHSFOBOCG:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 17:10:49
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 17:21:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRI29A9QL0:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 17:21:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 17:21:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRI29A9QL0:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 17:21:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:05:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRIR6DKJQD:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:05:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:05:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRIR6DKJQD:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:05:48
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:09:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRIT50P3PJ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:09:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:09:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRIT50P3PJ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "type": "string"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:09:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=Year
RequestBody = 
Time = 23.05.2023 18:10:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRIT50P3PJ:00000009
Body = [{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":10,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}}]
ResponseTime = 23.05.2023 18:10:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:22:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ4DL548D:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:22:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:22:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ4DL548D:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:22:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:25:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ6812P5T:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:25:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:25:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ6812P5T:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:25:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:26:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ6IL3BO7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:26:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:26:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJ6IL3BO7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Name":"John Smith","Img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"Name":"Jane Doe","Img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"John Doe","Img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Jane Smith","Img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Name":"Tom Hanks","Img":"https://example.com/tom-hanks.jpg","Movies":[{"Id":1,"Title":"Forrest Gump","Color":"#00FF00","Color2":"#FFFFFF","Img":"https://example.com/forrest-gump.jpg","Video":"https://example.com/forrest-gump.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.8,"RottenTomatoes":71},"Metadata":null},{"Id":2,"Title":"Cast Away","Color":"#FF0000","Color2":"#FFFFFF","Img":"https://example.com/cast-away.jpg","Video":"https://example.com/cast-away.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":7.8,"RottenTomatoes":90},"Metadata":null}]}
                },
                "Example 2": {
                  "value": {"Id":2,"Name":"Emma Stone","Img":"https://example.com/emma-stone.jpg","Movies":[{"Id":3,"Title":"La La Land","Color":"#FFA500","Color2":"#FFFFFF","Img":"https://example.com/la-la-land.jpg","Video":"https://example.com/la-la-land.mp4","Description":"Lorem ipsum dolor sit amet.","Rating":{"IMDb":8.0,"RottenTomatoes":91},"Metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":0,"Title":"The Matrix","Color":"Green","Color2":"Black","Img":"https://www.example.com/the-matrix.jpg","Video":"https://www.example.com/the-matrix.mp4","Description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","Rating":{"IMDb":8.7,"RottenTomatoes":87},"Actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"Metadata":{"Hr":"2h 16m","Year":1999,"Genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"Id":0,"Title":"The Dark Knight","Color":"Black","Color2":"White","Img":"https://www.example.com/the-dark-knight.jpg","Video":"https://www.example.com/the-dark-knight.mp4","Description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","Rating":{"IMDb":9.0,"RottenTomatoes":94},"Actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"Metadata":{"Hr":"2h 32m","Year":2008,"Genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"Id":1,"Title":"The Shawshank Redemption","Color":"Green","Color2":"Yellow","Img":"https://www.example.com/images/shawshank_redemption.jpg","Video":"https://www.example.com/videos/shawshank_redemption.mp4","Description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","Actors":[{"Id":1,"Name":"Tim Robbins","Img":"https://www.example.com/images/tim_robbins.jpg"},{"Id":2,"Name":"Morgan Freeman","Img":"https://www.example.com/images/morgan_freeman.jpg"}],"Rating":{"IMDb":9.3,"RottenTomatoes":90},"Metadata":{"Hr":"2h 22m","Year":1994,"Genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"Id":2,"Title":"The Godfather","Color":"Black","Color2":"White","Img":"https://www.example.com/images/godfather.jpg","Video":"https://www.example.com/videos/godfather.mp4","Description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","Actors":[{"Id":3,"Name":"Marlon Brando","Img":"https://www.example.com/images/marlon_brando.jpg"},{"Id":4,"Name":"Al Pacino","Img":"https://www.example.com/images/al_pacino.jpg"}],"Rating":{"IMDb":9.2,"RottenTomatoes":98},"Metadata":{"Hr":"2h 55m","Year":1972,"Genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:26:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:33:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJAJFDRUN:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:33:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:33:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJAJFDRUN:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:33:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:34:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJB46UOQ3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 18:34:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 18:34:16
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRJB46UOQ3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "type": "string"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 18:34:17
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 19:38:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKETN7HCF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 19:38:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 19:38:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKETN7HCF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          "Add",
          "Remove",
          "Replace",
          "Move",
          "Copy",
          "Test",
          "Invalid"
        ],
        "type": "string"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 19:38:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 19:39:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKETN7HCG:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":10,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}]
ResponseTime = 23.05.2023 19:39:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 19:40:04
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKETN7HCG:00000003
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":10,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}]
ResponseTime = 23.05.2023 19:40:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:07:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKV1EBOKF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:07:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:07:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKV1EBOKF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:07:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:08:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKVK7FVCC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:08:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:08:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRKVK7FVCC:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:08:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:11:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL1CQG5G2:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:11:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:11:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL1CQG5G2:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:11:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:12:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL21BJ5SQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:12:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:12:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL21BJ5SQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:12:34
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:13:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL2OMV8NH:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:13:50
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:13:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL2OMV8NH:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:13:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?sortBy=Year
RequestBody = 
Time = 23.05.2023 20:14:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL2OMV8NI:00000001
Body = [{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":10,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}},{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":6,"rottenTomatoes":35},"metadata":{"hr":"","year":2001,"genre":""}}]
ResponseTime = 23.05.2023 20:14:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:14:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL3C95BEJ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 23.05.2023 20:14:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 23.05.2023 20:14:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQRL3C95BEJ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 23.05.2023 20:14:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 24.05.2023 21:56:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQSG0H6D3AR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 24.05.2023 21:56:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 24.05.2023 21:56:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQSG0H6D3AR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 24.05.2023 21:56:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 25.05.2023 19:22:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQT6FGFOVGR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 25.05.2023 19:22:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 25.05.2023 19:22:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQT6FGFOVGR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 25.05.2023 19:22:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 25.05.2023 19:23:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQT6FGFOVGS:00000001
Body = [{"id":11,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","actors":[],"rating":{"imDb":8.7,"rottenTomatoes":87},"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}},{"id":10,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":2,"rottenTomatoes":74},"metadata":{"hr":"","year":2003,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":3,"rottenTomatoes":54},"metadata":{"hr":"","year":2007,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":4,"rottenTomatoes":32},"metadata":{"hr":"","year":2006,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7,"rottenTomatoes":12},"metadata":{"hr":"","year":2005,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9,"rottenTomatoes":90},"metadata":{"hr":"","year":2004,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9,"rottenTomatoes":20},"metadata":{"hr":"","year":2003,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":70},"metadata":{"hr":"","year":2002,"genre":""}}]
ResponseTime = 25.05.2023 19:23:21
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 25.05.2023 21:56:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQT95AA1EDR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 25.05.2023 21:56:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 25.05.2023 21:56:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQT95AA1EDR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 25.05.2023 21:56:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 26.05.2023 01:01:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTCCQTSJGM:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 26.05.2023 01:01:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 26.05.2023 01:01:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTCCQTSJGM:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 26.05.2023 01:01:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 26.05.2023 19:04:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTV9PPI957:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 26.05.2023 19:04:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 26.05.2023 19:04:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTV9PPI957:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The movie's sorting algorithm.",
            "style": "form",
            "schema": {
              "$ref": "#/components/schemas/SigmaMovies.Application.HelperModels.SortBy"
            }
          },
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.JsonPatchDocument`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]"
            },
            "nullable": true,
            "readOnly": true
          },
          "contractResolver": {
            "$ref": "#/components/schemas/Newtonsoft.Json.Serialization.IContractResolver"
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Actors.Actor]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation`1[SigmaMovies.Domain.Movies.Movie]": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Newtonsoft.Json.Serialization.IContractResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.HelperModels.SortBy": {
        "enum": [
          "Year",
          "IMDbRating",
          "RTRating"
        ],
        "type": "string"
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 26.05.2023 19:04:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "Jane Doe",
  "img": "https://example.com/images/jane-doe.jpg"
}
Time = 26.05.2023 19:05:35
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMQTV9PPI957:00000009
Body = 
ResponseTime = 26.05.2023 19:05:36
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 26.05.2023 19:06:05
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTV9PPI957:0000000B
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODUxMTM1NjYsImV4cCI6MTY4NTExNzE2NiwiaWF0IjoxNjg1MTEzNTY2LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.dvNe-RwIQhCfVR1u52Omb7rEfjJxfPrKrDNNUM4aPwA
ResponseTime = 26.05.2023 19:06:07
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Actors/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "John Smith",
  "img": "https://example.com/images/john-smith.jpg"
}
Time = 26.05.2023 19:06:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTV9PPI957:0000000D
Body = 
ResponseTime = 26.05.2023 19:06:26
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "The Shawshank Redemption",
  "color": "Green",
  "color2": "Yellow",
  "img": "https://www.example.com/images/shawshank_redemption.jpg",
  "video": "https://www.example.com/videos/shawshank_redemption.mp4",
  "description": "Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.",
  "actors": [
    {
      "id": 3,
      "name": "Tim Robbins",
      "img": "https://www.example.com/images/tim_robbins.jpg"
    },
    {
      "id": 4,
      "name": "Morgan Freeman",
      "img": "https://www.example.com/images/morgan_freeman.jpg"
    }
  ],
  "rating": {
    "imDb": 9.3,
    "rottenTomatoes": 90
  },
  "metadata": {
    "hr": "2h 22m",
    "year": 1994,
    "genre": "Drama"
  }
}
Time = 26.05.2023 19:08:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQTV9PPI957:0000000F
Body = 
ResponseTime = 26.05.2023 19:08:45
