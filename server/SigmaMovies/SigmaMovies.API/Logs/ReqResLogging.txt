 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 20:58:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 20:58:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:01:02
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:01:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:03:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /favicon.ico
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:03:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:09:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQJ4RE3QC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:09:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:09:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQJ4RE3QC:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:09:22
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:17:05
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:19:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQON0DBTE:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:19:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:19:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQON0DBTE:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:19:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:19:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:21:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:30:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:30:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:30:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:30:03
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:31:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJQUMFG8F8:00000001
Body = 
ResponseTime = 13.05.2023 21:31:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:34:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:34:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:34:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSB:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:34:13
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:34:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR10FEHSC:00000001
Body = 
ResponseTime = 13.05.2023 21:34:25
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:34:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:36:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR2D7MCOP:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:36:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:36:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJR2D7MCOP:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:36:49
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "cxrrrr",
      "img": "string"
    },
    {
      "id": 10,
      "name": "atttat",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:37:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:51:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAC:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 21:51:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:51:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAD:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:51:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 21:52:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAE:00000005
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 21:52:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:52:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 21:53:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRATRJHAG:00000001
Body = 
ResponseTime = 13.05.2023 21:53:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:11:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRM1N1K5F:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:11:48
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:11:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJRM1N1K5F:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:11:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:13:02
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:15:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:16:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJROM5U0I1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:16:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:16:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJROM5U0I1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:16:35
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:18:04
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:19:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:29:56
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:30:51
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:34:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:36:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS3T5FIG7:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:36:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:36:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS3T5FIG7:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:36:36
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:37:09
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:38:36
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:40:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:42:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS73Q0F27:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:42:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:42:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJS73Q0F27:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:42:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:42:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:51:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 13.05.2023 22:51:38
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 13.05.2023 22:51:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 13.05.2023 22:51:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:51:48
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ტტკტკკდს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ატატტტტ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:52:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQS:00000001
Body = 
ResponseTime = 13.05.2023 22:55:32
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:55:57
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:56:10
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 22:56:54
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:02:46
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:03:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQT:00000009
Body = 
ResponseTime = 13.05.2023 23:07:01
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:07:05
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:09:07
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "asdasdads",
      "img": "string"
    },
    {
      "id": 10,
      "name": "gfgh",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:09:48
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:11:27
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:15:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:17:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQU:00000003
Body = 
ResponseTime = 13.05.2023 23:23:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "zzzzz",
      "img": "string"
    },
    {
      "id": 10,
      "name": "xxxx",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:26:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJSCA11CQV:00000001
Body = 
ResponseTime = 13.05.2023 23:29:23
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:29:33
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:31:00
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 13.05.2023 23:37:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:15:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5G:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:15:39
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:15:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "xxxxxxxx",
      "img": "string"
    },
    {
      "id": 10,
      "name": "vvvvvvv",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:15:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5G:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:15:42
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "hhhhhhh",
      "img": "string"
    },
    {
      "id": 10,
      "name": "jjjjj",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:15:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5H:00000001
Body = 
ResponseTime = 14.05.2023 00:15:57
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:16:24
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:18:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5J:00000001
Body = 
ResponseTime = 14.05.2023 00:22:41
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:23:42
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5K:00000001
Body = 
ResponseTime = 14.05.2023 00:26:43
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    }

  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:26:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5L:00000001
Body = 
ResponseTime = 14.05.2023 00:26:55
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "kkkk",
      "img": "string"
    },
    {
      "id": 10,
      "name": "zzz",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:27:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJTR8GNL5M:00000001
Body = 
ResponseTime = 14.05.2023 00:27:17
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:44:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAK:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:44:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:44:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAL:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:44:47
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "აააააააააააააა",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ბბბბბბ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:48:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAM:00000001
Body = 
ResponseTime = 14.05.2023 00:50:20
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ზზზზზ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ხხხხხ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:50:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAM:00000003
Body = 
ResponseTime = 14.05.2023 00:52:05
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "გტგტტგტ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ტგტგტგ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:52:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000001
Body = 
ResponseTime = 14.05.2023 00:53:26
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "გტგტტგტ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ტგტგტგ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:53:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000003
Body = 
ResponseTime = 14.05.2023 00:53:34
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "ზზზზზ",
      "img": "string"
    },
    {
      "id": 10,
      "name": "ზზზზზ",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:53:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUBG1MMAN:00000005
Body = 
ResponseTime = 14.05.2023 00:55:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:56:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUI26FP7B:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 00:56:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 00:56:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQJUI26FP7B:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 00:56:31
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "სსსს",
      "img": "string"
    },
    {
      "id": 10,
      "name": "სსსს",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 10,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 00:56:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:11:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT5:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:11:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:11:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT5:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:11:13
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 10,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:21:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKGK8LCJT6:00000001
Body = 
ResponseTime = 14.05.2023 18:22:59
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 10,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:23:19
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 9,
      "name": "wewewew",
      "img": "string"
    },
    {
      "id": 7,
      "name": "wqwqwqwq",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 0,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:31:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:33:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:33:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:33:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:33:34
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:35:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPG:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 18:35:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetMovieById
IsSecured = True
QueryString = ?Id=1
RequestBody = 
Time = 14.05.2023 18:36:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPH:00000001
Body = {"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}
ResponseTime = 14.05.2023 18:36:08
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "შორენა ბეგაშვილი",
  "img": "ფოტო"
}
Time = 14.05.2023 18:36:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPI:00000001
Body = 
ResponseTime = 14.05.2023 18:36:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddActor
IsSecured = True
QueryString = 
RequestBody = {
  "name": "bames jond",
  "img": "pict"
}
Time = 14.05.2023 18:37:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPJ:00000001
Body = 
ResponseTime = 14.05.2023 18:37:02
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateActor
IsSecured = True
QueryString = 
RequestBody = {
  "id": 5,
  "name": "asasasa",
  "img": "ddddd"
}
Time = 14.05.2023 18:37:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPK:00000001
Body = 
ResponseTime = 14.05.2023 18:37:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:37:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKH0OUCBPL:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 18:37:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:57:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKHE503ODF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 18:57:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 18:57:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKHE503ODF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Responses.ActorResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Responses.ActorResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 18:57:32
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:58:17
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:58:25
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 1,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 18:59:28
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 7,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 10,
      "name": "string",
      "img": "string"
    },
    {
      "id": 9,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 19:02:15
 logged from Middleware
IP = ::1
Address = https
Method = PUT
Path = /v1/Movies/UpdateMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 7,
  "title": "string",
  "color": "string",
  "color2": "string",
  "img": "string",
  "video": "string",
  "description": "string",
  "actors": [
    {
      "id": 7,
      "name": "string",
      "img": "string"
    },
    {
      "id": 6,
      "name": "string",
      "img": "string"
    }
  ],
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 0
  }
}
Time = 14.05.2023 19:04:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:52:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GS:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 20:52:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:52:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GS:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 20:52:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:53:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GT:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0}}]
ResponseTime = 14.05.2023 20:53:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllActors
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 20:54:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKJEKUM6GU:00000001
Body = [{"id":3,"name":"apapaapapapa","img":"string","movies":null},{"id":4,"name":"444444","img":"string","movies":null},{"id":5,"name":"asasasa","img":"ddddd","movies":null},{"id":6,"name":"qsvii","img":"string","movies":null},{"id":7,"name":"მიხო","img":"ფსიხო","movies":null},{"id":8,"name":"8888","img":"string","movies":null},{"id":9,"name":"wewewew","img":"string","movies":null},{"id":10,"name":"wqwqwqwq","img":"string","movies":null},{"id":11,"name":"bbbbbbbbbbbbbbbbbbbbbbbbb","img":"string","movies":null},{"id":14,"name":"cxrrrr","img":"string","movies":null},{"id":15,"name":"atttat","img":"string","movies":null},{"id":16,"name":"შორენა ბეგაშვილი","img":"ფოტო","movies":null},{"id":17,"name":"bames jond","img":"pict","movies":null}]
ResponseTime = 14.05.2023 20:54:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 21:37:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8M:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 14.05.2023 21:37:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 14.05.2023 21:37:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8M:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"]}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71}},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90}}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91}}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 14.05.2023 21:37:12
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /api/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "username": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 14.05.2023 21:40:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQKK7BIEO8N:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjEiLCJyb2xlIjoiQWRtaW4iLCJuYmYiOjE2ODQwODYwNDUsImV4cCI6MTY4NDA4OTY0NSwiaWF0IjoxNjg0MDg2MDQ1LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.gSII1ikgsKv1PfjJVH0oz7z8p-cVgjP9A8cawya-8fU
ResponseTime = 14.05.2023 21:40:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 18.05.2023 00:13:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 18.05.2023 00:13:24
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 18.05.2023 00:13:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":null}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":null}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 18.05.2023 00:13:26
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:"2008"}
Time = 18.05.2023 00:18:16
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000001
Body = {"errors":{"metadata.Hr":["Invalid character after parsing property name. Expected ':' but got: 2. Path 'metadata.Hr', line 21, position 11.","Invalid JavaScript property identifier character: \". Path 'metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-5fe60d40bfb8ca140f465e1d8849dee7-c179e1ae77160e73-00"}
ResponseTime = 18.05.2023 00:18:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:2008}
Time = 18.05.2023 00:18:39
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000003
Body = {"errors":{"metadata.Hr":["Unterminated string. Expected delimiter: \". Path 'metadata.Hr', line 21, position 15.","Unexpected end when deserializing object. Path 'metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-e92bcc2f8e1f1afa9114186caf329fe4-6b8ac11b139c842b-00"}
ResponseTime = 18.05.2023 00:18:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "Metadata": {
    "Genre": "Detective",
    "Hr":"3:00:00",
    "Year:2008}
Time = 18.05.2023 00:19:58
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000005
Body = {"errors":{"Metadata.Hr":["Unterminated string. Expected delimiter: \". Path 'Metadata.Hr', line 21, position 15.","Unexpected end when deserializing object. Path 'Metadata.Hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-723cf12959a9d630c5145c07048e5560-d66a1a15de916c05-00"}
ResponseTime = 18.05.2023 00:19:58
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008}
Time = 18.05.2023 00:20:29
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000007
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 21, position 15.","Unexpected end when deserializing object. Path 'metadata.hr', line 21, position 15."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-8b80516e0c6d455454ce8ff53187ba43-f58f9eddcf175396-00"}
ResponseTime = 18.05.2023 00:20:29
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008};}
}
Time = 18.05.2023 00:21:27
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:00000009
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 22, position 1.","Unexpected end when deserializing object. Path 'metadata.hr', line 22, position 1."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-a2271ac6d8c482fa9d39c12c7c9e90ea-7627080cb29fa97d-00"}
ResponseTime = 18.05.2023 00:21:27
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year:2008}
}
Time = 18.05.2023 00:21:38
Response logged from middleware StatusCode = 400
TraceIdentifier = 0HMQN2CL9C7M4:0000000B
Body = {"errors":{"metadata.hr":["Unterminated string. Expected delimiter: \". Path 'metadata.hr', line 22, position 1.","Unexpected end when deserializing object. Path 'metadata.hr', line 22, position 1."]},"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1","title":"One or more validation errors occurred.","status":400,"traceId":"00-ca6ee9fa7eecf5b8263f0223df03a4cd-9985ddda795867d9-00"}
ResponseTime = 18.05.2023 00:21:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:24:18
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 2,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:25:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Movies/AddMovie
IsSecured = True
QueryString = 
RequestBody = {
  "id": 0,
  "title": "The Dark Knight",
  "color": "Black",
  "color2": "White",
  "img": "https://www.example.com/the-dark-knight.jpg",
  "video": "https://www.example.com/the-dark-knight.mp4",
  "description": "When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.",
  "rating": {
    "imDb": 9,
    "rottenTomatoes": 94
  },
  "actors": [
    "Christian Bale",
    "Heath Ledger",
    "Aaron Eckhart"
  ],
  "metadata": {
    "genre": "Detective",
    "hr":"3:00:00",
    "year": 2008
  }
}

Time = 18.05.2023 00:27:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQN2CL9C7M4:00000011
Body = 
ResponseTime = 18.05.2023 00:27:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFG:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:18:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFG:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:18:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:18:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFH:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:18:56
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/Movies/DeleteMovie
IsSecured = True
QueryString = ?id=1
RequestBody = 
Time = 19.05.2023 23:20:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFI:00000001
Body = 
ResponseTime = 19.05.2023 23:20:02
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/Movies/DeleteMovie
IsSecured = True
QueryString = ?id=6
RequestBody = 
Time = 19.05.2023 23:20:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFI:00000003
Body = 
ResponseTime = 19.05.2023 23:20:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:20:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFJ:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:20:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 19.05.2023 23:20:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJN7H2UFK:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:20:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:22:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:22:52
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:22:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:22:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:24:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJPO3C43G:00000009
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 19.05.2023 23:24:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:24:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:25:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSJ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:25:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:25:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSJ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:25:27
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:28:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJR5T5FSK:00000001
Body = []
ResponseTime = 19.05.2023 23:28:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:29:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:32:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:32:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:32:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:32:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 19.05.2023 23:33:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOJV4EG0ET:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 19.05.2023 23:33:24
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:34:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOK0DUCQED:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.05.2023 23:34:49
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.05.2023 23:34:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQOK0DUCQED:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "wtf",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.05.2023 23:34:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?wtf=asd
RequestBody = 
Time = 19.05.2023 23:35:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.05.2023 23:58:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDIAD2KGB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.05.2023 23:58:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.05.2023 23:58:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDIAD2KGC:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetAllActors": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/GetActorByIdFull": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddActor": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActor": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.05.2023 23:58:33
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:09:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40J:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:09:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:09:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40K:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:09:58
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:12:23
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40L:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:12:25
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:12:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40M:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:12:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:13:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40N:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:13:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:13:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDOMCF40O:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:13:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:20:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDUHE45NI:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:20:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:20:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDUHE45NJ:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:20:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:20:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:22:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:22:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:22:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:22:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:23:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T4:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:35
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:23:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T5:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:23:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPDVF693T6:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:23:54
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:30:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHU:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:30:16
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:30:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHU:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:30:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:30:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DHV:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:30:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:30:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DI0:00000001
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:30:53
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:31:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE42H8DI1:00000001
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:31:02
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:31:45
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:33:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"SigmaMovies.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.05.2023 00:33:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:33:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "SigmaMovies Api",
    "description": "Api for sigmest of sigma movies",
    "contact": {
      "name": "Movies Application",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Actors/GetAllActors": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves all actors.",
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorById": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/GetActorByIdFull": {
      "get": {
        "tags": [
          "Actors"
        ],
        "summary": "Retrieves actor with nested movie by id.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The actor id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/AddActor": {
      "post": {
        "tags": [
          "Actors"
        ],
        "summary": "Adds a new actor to the database.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"name":"John Smith","img":"https://example.com/images/john-smith.jpg"}
                },
                "Example 2": {
                  "value": {"name":"Jane Doe","img":"https://example.com/images/jane-doe.jpg"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActor": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates an actor.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"John Doe","img":"https://example.com/image.jpg"}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Jane Smith","img":"https://example.com/image.png"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdateActorWithNested": {
      "put": {
        "tags": [
          "Actors"
        ],
        "summary": "Updates actor with nested movie.",
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"name":"Tom Hanks","img":"https://example.com/tom-hanks.jpg","movies":[{"id":1,"title":"Forrest Gump","color":"#00FF00","color2":"#FFFFFF","img":"https://example.com/forrest-gump.jpg","video":"https://example.com/forrest-gump.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.8,"rottenTomatoes":71},"metadata":null},{"id":2,"title":"Cast Away","color":"#FF0000","color2":"#FFFFFF","img":"https://example.com/cast-away.jpg","video":"https://example.com/cast-away.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":7.8,"rottenTomatoes":90},"metadata":null}]}
                },
                "Example 2": {
                  "value": {"id":2,"name":"Emma Stone","img":"https://example.com/emma-stone.jpg","movies":[{"id":3,"title":"La La Land","color":"#FFA500","color2":"#FFFFFF","img":"https://example.com/la-la-land.jpg","video":"https://example.com/la-la-land.mp4","description":"Lorem ipsum dolor sit amet.","rating":{"imDb":8.0,"rottenTomatoes":91},"metadata":null}]}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Actors/UpdatePatchActor/{id}": {
      "patch": {
        "tags": [
          "Actors"
        ],
        "summary": "Patches actor.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Actor's id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Actor's request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Users.Requests.UserRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetAllMovies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves a list of all movies.",
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "The movie's genre.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The movie's year.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "The movie's delete status.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Responses.MovieResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Movies/GetMovieById": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Retrieves movie by Id.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/AddMovie": {
      "post": {
        "tags": [
          "Movies"
        ],
        "summary": "Adds a new movie to database.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":0,"title":"The Matrix","color":"Green","color2":"Black","img":"https://www.example.com/the-matrix.jpg","video":"https://www.example.com/the-matrix.mp4","description":"A computer hacker learns from mysterious rebels about the true nature of his reality and his role in the war against its controllers.","rating":{"imDb":8.7,"rottenTomatoes":87},"actors":["Keanu Reeves","Carrie-Anne Moss","Laurence Fishburne"],"metadata":{"hr":"2h 16m","year":1999,"genre":"Sci-Fi"}}
                },
                "Example 2": {
                  "value": {"id":0,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","rating":{"imDb":9.0,"rottenTomatoes":94},"actors":["Christian Bale","Heath Ledger","Aaron Eckhart"],"metadata":{"hr":"2h 32m","year":2008,"genre":"Action"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdateMovie": {
      "put": {
        "tags": [
          "Movies"
        ],
        "summary": "Updates a movie.",
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieRequestPutModel"
              },
              "examples": {
                "Example 1": {
                  "value": {"id":1,"title":"The Shawshank Redemption","color":"Green","color2":"Yellow","img":"https://www.example.com/images/shawshank_redemption.jpg","video":"https://www.example.com/videos/shawshank_redemption.mp4","description":"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.","actors":[{"id":1,"name":"Tim Robbins","img":"https://www.example.com/images/tim_robbins.jpg"},{"id":2,"name":"Morgan Freeman","img":"https://www.example.com/images/morgan_freeman.jpg"}],"rating":{"imDb":9.3,"rottenTomatoes":90},"metadata":{"hr":"2h 22m","year":1994,"genre":"Drama"}}
                },
                "Example 2": {
                  "value": {"id":2,"title":"The Godfather","color":"Black","color2":"White","img":"https://www.example.com/images/godfather.jpg","video":"https://www.example.com/videos/godfather.mp4","description":"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.","actors":[{"id":3,"name":"Marlon Brando","img":"https://www.example.com/images/marlon_brando.jpg"},{"id":4,"name":"Al Pacino","img":"https://www.example.com/images/al_pacino.jpg"}],"rating":{"imDb":9.2,"rottenTomatoes":98},"metadata":{"hr":"2h 55m","year":1972,"genre":"Crime"}}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/UpdatePatchMovie/{id}": {
      "patch": {
        "tags": [
          "Movies"
        ],
        "summary": "Patches a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The movie id.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The movie request model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    },
    "/v1/Movies/DeleteMovie": {
      "delete": {
        "tags": [
          "Movies"
        ],
        "summary": "Deletes a movie.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The movie id.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty response."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SigmaMovies.Application.Actors.Requests.ActorDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "movies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Movies.Requests.MovieDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Actors.Requests.ActorRequestPutModelNoNested": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "actors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Requests.MovieRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Movies.Responses.MovieResponseModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "color2": {
            "type": "string",
            "nullable": true
          },
          "img": {
            "type": "string",
            "nullable": true
          },
          "video": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "actors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SigmaMovies.Application.Actors.Requests.ActorDto"
            },
            "nullable": true
          },
          "rating": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Rating"
          },
          "metadata": {
            "$ref": "#/components/schemas/SigmaMovies.Domain.Movies.Metadata"
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Application.Users.Requests.UserRequestModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Metadata": {
        "type": "object",
        "properties": {
          "hr": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "genre": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SigmaMovies.Domain.Movies.Rating": {
        "type": "object",
        "properties": {
          "imDb": {
            "type": "number",
            "format": "double"
          },
          "rottenTomatoes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.05.2023 00:33:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.05.2023 00:34:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:00000009
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:34:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=true
RequestBody = 
Time = 21.05.2023 00:35:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:0000000B
Body = [{"id":1,"title":"string","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":6,"title":"ვვვვვვვვ","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}}]
ResponseTime = 21.05.2023 00:35:06
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Movies/GetAllMovies
IsSecured = True
QueryString = ?isDeleted=false
RequestBody = 
Time = 21.05.2023 00:35:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMQPE5SC94H1:0000000D
Body = [{"id":2,"title":"კახელი ვირიტყანიები","color":"#0000F","color2":"#0000F","img":"ragaclinki.com","video":"ragacytlinki.com","description":"ფულეიჩდი","actors":[],"rating":{"imDb":7.8,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":3,"title":"Fight Club","color":"red","color2":"blue","img":"theimg","video":"thevideo","description":"thedesc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":4,"title":"Inglorious basters","color":"red","color2":"blue","img":"img","video":"video","description":"desc","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":90},"metadata":{"hr":"","year":0,"genre":""}},{"id":5,"title":"test","color":"test","color2":"test","img":"test","video":"test","description":"test","actors":[],"rating":{"imDb":7.0,"rottenTomatoes":7},"metadata":{"hr":"","year":0,"genre":""}},{"id":7,"title":"testactor","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":9,"name":"wewewew","img":"string"},{"id":10,"name":"wqwqwqwq","img":"string"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":8,"title":"sakaifokino","color":"string","color2":"string","img":"string","video":"string","description":"string","actors":[{"id":7,"name":"მიხო","img":"ფსიხო"}],"rating":{"imDb":0.0,"rottenTomatoes":0},"metadata":{"hr":"","year":0,"genre":""}},{"id":9,"title":"The Dark Knight","color":"Black","color2":"White","img":"https://www.example.com/the-dark-knight.jpg","video":"https://www.example.com/the-dark-knight.mp4","description":"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests of his ability to fight injustice.","actors":[],"rating":{"imDb":9.0,"rottenTomatoes":94},"metadata":{"hr":"3:00:00","year":2008,"genre":"Detective"}}]
ResponseTime = 21.05.2023 00:35:14
